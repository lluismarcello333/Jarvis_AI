{"ast":null,"code":"var _jsxFileName = \"/home/luiz/Documentos/projects/J-A-R-V-I-S/web/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { makeRequest } from \"./api/api\";\nimport Avatar from \"./assets/staticJarvis.png\";\nimport ChatMessage from \"./components/ChatMessage/ChatMessage\";\nimport \"./styles/App.css\";\nimport \"./styles/reset.css\";\nimport Header from \"./components/Header/Header\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [userMessages, setUserMessages] = useState([]);\n  const [chatLog, setChatLog] = useState([{\n    user: \"gpt\",\n    message: \"Como posso te ajudar hoje?\"\n  }]);\n  const chatLogRef = useRef(null);\n  useEffect(() => {\n    chatLogRef.current.scrollTop = chatLogRef.current.scrollHeight;\n  }, [chatLog]);\n  async function handleSubmit(e) {\n    e.preventDefault();\n    setUserMessages([...userMessages, input]);\n    setChatLog(prevLog => [...prevLog, {\n      user: \"me\",\n      message: input\n    }]);\n    let response = await makeRequest({\n      prompt: input\n    });\n    response = response.data.split(\"\\n\").map(line => ({\n      user: \"gpt\",\n      message: line\n    }));\n    setChatLog(prevLog => [...prevLog, ...response]);\n    for (let i = 0; i < response.length; i++) {\n      await typeResponse(response[i]);\n    }\n    setInput(\"\");\n  }\n  async function typeResponse(line) {\n    for (let i = 0; i <= line.message.length; i++) {\n      await new Promise(resolve => setTimeout(resolve, 20));\n      setChatLog(prevLog => [...prevLog.slice(0, -1), {\n        user: \"gpt\",\n        message: line.message.slice(0, i),\n        newMessage: true\n      }]);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"background-container\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: Avatar,\n        className: \"avatar-image\",\n        alt: \"Avatar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"chatbox\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-log\",\n        ref: chatLogRef,\n        children: chatLog.map((message, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n          message: message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-holder\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            rows: \"1\",\n            className: \"chat-input-textarea\",\n            value: input,\n            onChange: e => setInput(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lxD024GgFaY7h3Jf9eP+QmSjwRE=\");\n_c = App;\nexport default App;\n\n/* function App() {\n  const [input, setInput] = useState(\"\");\n  const [userMessages, setUserMessages] = useState([]);\n  const [chatLog, setChatLog] = useState([\n    {\n      user: \"gpt\",\n      message: \"Como posso te ajudar hoje?\",\n    },\n  ]);\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    let response = await makeRequest({ prompt: input });\n\n    // Dividir a resposta em linhas\n    response = response.data.split(\"\\n\").map((line) => <p>{line}</p>);\n\n    // Adicionar a mensagem do usuário ao histórico de mensagens do usuário\n    setUserMessages([...userMessages, input]);\n\n    // Inicializar o chatLog com a mensagem do usuário\n    setChatLog([\n      ...chatLog,\n      { user: \"me\", message: `${input}` },\n      {\n        user: \"gpt\",\n        message: response,\n      },\n    ]);\n\n    // Para cada linha da resposta\n    for (let i = 0; i < response.length; i++) {\n      // Esperar 100 milissegundos antes de adicionar o próximo caractere (ajuste conforme necessário)\n      await typeResponse(response[i]);\n    }\n\n    // Limpar o campo de entrada\n    setInput(\"\");\n  }\n\n  // Função para simular a digitação da resposta do servidor\n  async function typeResponse(line) {\n    for (let i = 0; i <= line.length; i++) {\n      // Esperar 100 milissegundos antes de adicionar o próximo caractere (ajuste conforme necessário)\n      await new Promise((resolve) => setTimeout(resolve, 20));\n      // Adicionar o próximo caractere ao chatLog\n      setChatLog((prevLog) => [\n        ...prevLog.slice(0, -1),\n        { user: \"gpt\", message: line.slice(0, i), newMessage: true }, // Adicionar a propriedade newMessage\n      ]);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"background-container\">\n        <img src={Avatar} className=\"avatar-image\" alt=\"Avatar\" />\n      </div>\n      <section className=\"chatbox\">\n        <Header/>\n        <div className=\"chat-log\">\n          {chatLog.map((message, index) => (\n            <ChatMessage key={index} message={message} />\n          ))}\n        </div>\n        <div className=\"chat-input-holder\">\n          <form onSubmit={handleSubmit}>\n            <input\n              rows=\"1\"\n              className=\"chat-input-textarea\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n            ></input>\n          </form>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App; */\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","makeRequest","Avatar","ChatMessage","Header","jsxDEV","_jsxDEV","App","_s","input","setInput","userMessages","setUserMessages","chatLog","setChatLog","user","message","chatLogRef","current","scrollTop","scrollHeight","handleSubmit","e","preventDefault","prevLog","response","prompt","data","split","map","line","i","length","typeResponse","Promise","resolve","setTimeout","slice","newMessage","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","ref","index","onSubmit","rows","value","onChange","target","_c","$RefreshReg$"],"sources":["/home/luiz/Documentos/projects/J-A-R-V-I-S/web/src/App.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { makeRequest } from \"./api/api\";\nimport Avatar from \"./assets/staticJarvis.png\";\nimport ChatMessage from \"./components/ChatMessage/ChatMessage\";\nimport \"./styles/App.css\";\nimport \"./styles/reset.css\";\nimport Header from \"./components/Header/Header\";\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [userMessages, setUserMessages] = useState([]);\n  const [chatLog, setChatLog] = useState([\n    {\n      user: \"gpt\",\n      message: \"Como posso te ajudar hoje?\",\n    },\n  ]);\n\n  const chatLogRef = useRef(null);\n\n  useEffect(() => {\n    chatLogRef.current.scrollTop = chatLogRef.current.scrollHeight;\n  }, [chatLog]);\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    setUserMessages([...userMessages, input]);\n\n    setChatLog((prevLog) => [\n      ...prevLog,\n      { user: \"me\", message: input },\n    ]);\n\n    let response = await makeRequest({ prompt: input });\n\n    response = response.data.split(\"\\n\").map((line) => ({\n      user: \"gpt\",\n      message: line,\n    }));\n\n    setChatLog((prevLog) => [\n      ...prevLog,\n      ...response,\n    ]);\n\n    for (let i = 0; i < response.length; i++) {\n      await typeResponse(response[i]);\n    }\n\n    setInput(\"\");\n  }\n\n  async function typeResponse(line) {\n    for (let i = 0; i <= line.message.length; i++) {\n      await new Promise((resolve) => setTimeout(resolve, 20));\n      setChatLog((prevLog) => [\n        ...prevLog.slice(0, -1),\n        { user: \"gpt\", message: line.message.slice(0, i), newMessage: true },\n      ]);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"background-container\">\n        <img src={Avatar} className=\"avatar-image\" alt=\"Avatar\" />\n      </div>\n      <section className=\"chatbox\">\n        <Header />\n        <div className=\"chat-log\" ref={chatLogRef}>\n          {chatLog.map((message, index) => (\n            <ChatMessage key={index} message={message} />\n          ))}\n        </div>\n        <div className=\"chat-input-holder\">\n          <form onSubmit={handleSubmit}>\n            <input\n              rows=\"1\"\n              className=\"chat-input-textarea\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n            ></input>\n          </form>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n\n/* function App() {\n  const [input, setInput] = useState(\"\");\n  const [userMessages, setUserMessages] = useState([]);\n  const [chatLog, setChatLog] = useState([\n    {\n      user: \"gpt\",\n      message: \"Como posso te ajudar hoje?\",\n    },\n  ]);\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    let response = await makeRequest({ prompt: input });\n\n    // Dividir a resposta em linhas\n    response = response.data.split(\"\\n\").map((line) => <p>{line}</p>);\n\n    // Adicionar a mensagem do usuário ao histórico de mensagens do usuário\n    setUserMessages([...userMessages, input]);\n\n    // Inicializar o chatLog com a mensagem do usuário\n    setChatLog([\n      ...chatLog,\n      { user: \"me\", message: `${input}` },\n      {\n        user: \"gpt\",\n        message: response,\n      },\n    ]);\n\n    // Para cada linha da resposta\n    for (let i = 0; i < response.length; i++) {\n      // Esperar 100 milissegundos antes de adicionar o próximo caractere (ajuste conforme necessário)\n      await typeResponse(response[i]);\n    }\n\n    // Limpar o campo de entrada\n    setInput(\"\");\n  }\n\n  // Função para simular a digitação da resposta do servidor\n  async function typeResponse(line) {\n    for (let i = 0; i <= line.length; i++) {\n      // Esperar 100 milissegundos antes de adicionar o próximo caractere (ajuste conforme necessário)\n      await new Promise((resolve) => setTimeout(resolve, 20));\n      // Adicionar o próximo caractere ao chatLog\n      setChatLog((prevLog) => [\n        ...prevLog.slice(0, -1),\n        { user: \"gpt\", message: line.slice(0, i), newMessage: true }, // Adicionar a propriedade newMessage\n      ]);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"background-container\">\n        <img src={Avatar} className=\"avatar-image\" alt=\"Avatar\" />\n      </div>\n      <section className=\"chatbox\">\n        <Header/>\n        <div className=\"chat-log\">\n          {chatLog.map((message, index) => (\n            <ChatMessage key={index} message={message} />\n          ))}\n        </div>\n        <div className=\"chat-input-holder\">\n          <form onSubmit={handleSubmit}>\n            <input\n              rows=\"1\"\n              className=\"chat-input-textarea\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n            ></input>\n          </form>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App; */\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}