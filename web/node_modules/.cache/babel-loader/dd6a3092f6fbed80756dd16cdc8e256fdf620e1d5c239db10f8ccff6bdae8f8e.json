{"ast":null,"code":"var _jsxFileName = \"/home/luiz/Documentos/projects/J-A-R-V-I-S/web/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { makeRequest } from \"./api/api\";\nimport Avatar from \"./assets/staticJarvis.png\";\nimport ChatMessage from \"./components/ChatMessage/ChatMessage\";\nimport \"./styles/App.css\";\nimport \"./styles/reset.css\";\nimport SideMenu from \"./components/SideMenu/SideMenu\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [userMessages, setUserMessages] = useState([]);\n  const [chatLog, setChatLog] = useState([{\n    user: \"gpt\",\n    message: \"Como posso te ajudar hoje?\"\n  }]);\n  async function handleSubmit(e) {\n    e.preventDefault();\n    let response = await makeRequest({\n      prompt: input\n    });\n\n    // Dividir a resposta em linhas\n    response = response.data.split(\"\\n\").map(line => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: line\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 54\n    }, this));\n\n    // Adicionar a mensagem do usuário ao histórico de mensagens do usuário\n    setUserMessages([...userMessages, input]);\n\n    // Inicializar o chatLog com a mensagem do usuário\n    setChatLog([...chatLog, {\n      user: \"me\",\n      message: `${input}`\n    }]);\n\n    // Para cada linha da resposta\n    for (let i = 0; i < response.length; i++) {\n      // Esperar 100 milissegundos antes de adicionar o próximo caractere (ajuste conforme necessário)\n      await typeResponse(response[i]);\n    }\n\n    // Limpar o campo de entrada\n    setInput(\"\");\n  }\n\n  // Função para simular a digitação da resposta do servidor\n  async function typeResponse(line) {\n    for (let i = 0; i <= line.length; i++) {\n      // Esperar 100 milissegundos antes de adicionar o próximo caractere (ajuste conforme necessário)\n      await new Promise(resolve => setTimeout(resolve, 20));\n      // Adicionar o próximo caractere ao chatLog\n      setChatLog(prevLog => [...prevLog.slice(0, -1), {\n        user: \"gpt\",\n        message: line.slice(0, i)\n      }]);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(SideMenu, {\n      userMessages: userMessages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"background-container\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: Avatar,\n        className: \"avatar-image\",\n        alt: \"Avatar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"chatbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Bem-vindo! Como posso te ajudar?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-log\",\n        children: chatLog.map((message, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n          message: message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-holder\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            rows: \"1\",\n            className: \"chat-input-textarea\",\n            value: input,\n            onChange: e => setInput(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"YWfm4NENy4gwbpIOHLvAuom2kTM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","makeRequest","Avatar","ChatMessage","SideMenu","jsxDEV","_jsxDEV","App","_s","input","setInput","userMessages","setUserMessages","chatLog","setChatLog","user","message","handleSubmit","e","preventDefault","response","prompt","data","split","map","line","children","fileName","_jsxFileName","lineNumber","columnNumber","i","length","typeResponse","Promise","resolve","setTimeout","prevLog","slice","className","src","alt","index","onSubmit","rows","value","onChange","target","_c","$RefreshReg$"],"sources":["/home/luiz/Documentos/projects/J-A-R-V-I-S/web/src/App.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { makeRequest } from \"./api/api\";\nimport Avatar from \"./assets/staticJarvis.png\";\nimport ChatMessage from \"./components/ChatMessage/ChatMessage\";\nimport \"./styles/App.css\";\nimport \"./styles/reset.css\";\nimport SideMenu from \"./components/SideMenu/SideMenu\";\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [userMessages, setUserMessages] = useState([]);\n  const [chatLog, setChatLog] = useState([\n    {\n      user: \"gpt\",\n      message: \"Como posso te ajudar hoje?\",\n    },\n  ]);\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    let response = await makeRequest({ prompt: input });\n\n    // Dividir a resposta em linhas\n    response = response.data.split(\"\\n\").map(line => <p>{line}</p>);\n\n    // Adicionar a mensagem do usuário ao histórico de mensagens do usuário\n    setUserMessages([...userMessages, input]);\n\n    // Inicializar o chatLog com a mensagem do usuário\n    setChatLog([...chatLog, { user: \"me\", message: `${input}` }]);\n\n    // Para cada linha da resposta\n    for (let i = 0; i < response.length; i++) {\n      // Esperar 100 milissegundos antes de adicionar o próximo caractere (ajuste conforme necessário)\n      await typeResponse(response[i]);\n    }\n\n    // Limpar o campo de entrada\n    setInput(\"\");\n  }\n\n  // Função para simular a digitação da resposta do servidor\n  async function typeResponse(line) {\n    for (let i = 0; i <= line.length; i++) {\n      // Esperar 100 milissegundos antes de adicionar o próximo caractere (ajuste conforme necessário)\n      await new Promise((resolve) => setTimeout(resolve, 20));\n      // Adicionar o próximo caractere ao chatLog\n      setChatLog((prevLog) => [\n        ...prevLog.slice(0, -1),\n        { user: \"gpt\", message: line.slice(0, i) },\n      ]);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <SideMenu userMessages={userMessages} />\n      <div className=\"background-container\">\n        <img src={Avatar} className=\"avatar-image\" alt=\"Avatar\" />\n      </div>\n      <section className=\"chatbox\">\n      <header>\n        <h1>Bem-vindo! Como posso te ajudar?</h1>        \n      </header>\n        <div className=\"chat-log\">\n          {chatLog.map((message, index) => (\n            <ChatMessage key={index} message={message} />\n          ))}\n        </div>\n        <div className=\"chat-input-holder\">\n          <form onSubmit={handleSubmit}>\n            <input\n              rows=\"1\"\n              className=\"chat-input-textarea\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n            ></input>\n          </form>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}