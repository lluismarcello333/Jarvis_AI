{"ast":null,"code":"var _jsxFileName = \"/home/luiz/Documentos/projects/J-A-R-V-I-S/web/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Avatar from \"../src/assets/staticJarvis.png\";\nimport { makeRequest } from \"./api/api\";\nimport ChatMessage from \"./components/ChatMessage/ChatMessage\";\nimport \"./styles/App.css\";\nimport \"./styles/reset.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [chatLog, setChatLog] = useState([{\n    user: \"gpt\",\n    message: \"Como posso te ajudar hoje?\"\n  }]);\n  async function handleSubmit(e) {\n    e.preventDefault();\n    let response = await makeRequest({\n      prompt: input\n    });\n    response = response.data.split(\"\\n\").map(line => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: line\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 56\n    }, this));\n    setChatLog([...chatLog, {\n      user: \"me\",\n      message: `${input}`\n    }, {\n      user: \"gpt\",\n      message: response\n    }]);\n    setInput(\"\");\n  }\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      renderSmallImages();\n    }, 1000); // Define o intervalo de tempo para renderizar as imagens (em milissegundos)\n\n    return () => clearInterval(intervalId);\n  }, []); // Executa somente uma vez quando o componente é montado\n\n  function renderSmallImages() {\n    const container = document.querySelector(\".small-images-container\");\n    container.innerHTML = \"\"; // Limpa o conteúdo anterior\n\n    const containerWidth = container.offsetWidth;\n    const containerHeight = container.offsetHeight;\n    for (let i = 0; i < 10; i++) {\n      const img = document.createElement(\"img\");\n      img.src = Avatar;\n      img.classList.add(\"small-image\");\n\n      // Define posições aleatórias para as imagens\n      const randomX = Math.floor(Math.random() * containerWidth);\n      const randomY = Math.floor(Math.random() * containerHeight);\n      img.style.left = `${randomX}px`;\n      img.style.top = `${randomY}px`;\n      img.style.right = `${randomY}px`;\n      img.style.bottom = `${randomY}px`;\n      container.appendChild(img);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"chatbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-log\",\n        children: chatLog.map((message, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n          message: message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-holder\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            rows: \"1\",\n            className: \"chat-input-textarea\",\n            value: input,\n            onChange: e => setInput(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"small-images-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"AREbB0u5FNbD7XPvRMWIQYZNIJk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Avatar","makeRequest","ChatMessage","jsxDEV","_jsxDEV","App","_s","input","setInput","chatLog","setChatLog","user","message","handleSubmit","e","preventDefault","response","prompt","data","split","map","line","children","fileName","_jsxFileName","lineNumber","columnNumber","intervalId","setInterval","renderSmallImages","clearInterval","container","document","querySelector","innerHTML","containerWidth","offsetWidth","containerHeight","offsetHeight","i","img","createElement","src","classList","add","randomX","Math","floor","random","randomY","style","left","top","right","bottom","appendChild","className","index","onSubmit","rows","value","onChange","target","_c","$RefreshReg$"],"sources":["/home/luiz/Documentos/projects/J-A-R-V-I-S/web/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Avatar from \"../src/assets/staticJarvis.png\";\nimport { makeRequest } from \"./api/api\";\nimport ChatMessage from \"./components/ChatMessage/ChatMessage\";\nimport \"./styles/App.css\";\nimport \"./styles/reset.css\";\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [chatLog, setChatLog] = useState([\n    {\n      user: \"gpt\",\n      message: \"Como posso te ajudar hoje?\",\n    },\n  ]);\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    let response = await makeRequest({ prompt: input });\n\n    response = response.data.split(\"\\n\").map((line) => <p>{line}</p>);\n\n    setChatLog([\n      ...chatLog,\n      { user: \"me\", message: `${input}` },\n      { user: \"gpt\", message: response },\n    ]);\n    setInput(\"\");\n  }\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n     \n      renderSmallImages();\n    }, 1000); // Define o intervalo de tempo para renderizar as imagens (em milissegundos)\n\n    return () => clearInterval(intervalId);\n  }, []); // Executa somente uma vez quando o componente é montado\n\n  function renderSmallImages() {\n    const container = document.querySelector(\".small-images-container\");\n    container.innerHTML = \"\"; // Limpa o conteúdo anterior\n  \n    const containerWidth = container.offsetWidth;\n    const containerHeight = container.offsetHeight;\n  \n    for (let i = 0; i < 10; i++) {\n      const img = document.createElement(\"img\");\n      img.src = Avatar;\n      img.classList.add(\"small-image\");\n  \n      // Define posições aleatórias para as imagens\n      const randomX = Math.floor(Math.random() * containerWidth);\n      const randomY = Math.floor(Math.random() * containerHeight);\n      img.style.left = `${randomX}px`;\n      img.style.top = `${randomY}px`;\n      img.style.right = `${randomY}px`;\n      img.style.bottom = `${randomY}px`;\n  \n      container.appendChild(img);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      {/* <SideMenu></SideMenu> */}\n      <section className=\"chatbox\">\n        <div className=\"chat-log\">\n          {chatLog.map((message, index) => (\n            <ChatMessage key={index} message={message} />\n          ))}\n        </div>\n\n        <div className=\"chat-input-holder\">\n          <form onSubmit={handleSubmit}>\n            <input\n              rows=\"1\"\n              className=\"chat-input-textarea\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n            ></input>\n          </form>\n        </div>\n      </section>\n\n      <div className=\"small-images-container\"></div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}